<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Projects Index on Atharva Phadke</title><link>https://atharvap8.github.io/posts/ee-projects/</link><description>Recent content in Projects Index on Atharva Phadke</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>CC BY-NC 4.0</copyright><lastBuildDate>Fri, 28 Jan 2022 22:44:41 +0530</lastBuildDate><atom:link href="https://atharvap8.github.io/posts/ee-projects/index.xml" rel="self" type="application/rss+xml"/><item><title>Ble Car Security Controller</title><link>https://atharvap8.github.io/posts/2024/10/ble-car-security-controller/</link><pubDate>Wed, 30 Oct 2024 17:07:33 +0530</pubDate><guid>https://atharvap8.github.io/posts/2024/10/ble-car-security-controller/</guid><description>&lt;h1 id="central-locking-and-security-controller-for-wagon-r-with-esp32-and-ble">Central Locking and Security Controller for Wagon R with ESP32 and BLE&lt;/h1>
&lt;hr>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>This project showcases the development of a central locking and security controller for the Wagon R car, using Bluetooth Low Energy (BLE) technology. The system is based on an ESP32 microcontroller that handles key functionalities such as door signal control, bonnet status, indicators, and alarm settings. It is designed to work with a smartphone or a dedicated transmitter (built using the Xiao ESP32C3 board). Additionally, the system features an integrated immobilizer that communicates with the car’s ECM (Engine Control Module), preventing vehicle movement during theft attempts. The system also provides real-time alerts to the user&amp;rsquo;s cellphone in case of a security breach.&lt;/p></description><content type="html"><![CDATA[<h1 id="central-locking-and-security-controller-for-wagon-r-with-esp32-and-ble">Central Locking and Security Controller for Wagon R with ESP32 and BLE</h1>
<hr>
<h2 id="introduction">Introduction</h2>
<p>This project showcases the development of a central locking and security controller for the Wagon R car, using Bluetooth Low Energy (BLE) technology. The system is based on an ESP32 microcontroller that handles key functionalities such as door signal control, bonnet status, indicators, and alarm settings. It is designed to work with a smartphone or a dedicated transmitter (built using the Xiao ESP32C3 board). Additionally, the system features an integrated immobilizer that communicates with the car’s ECM (Engine Control Module), preventing vehicle movement during theft attempts. The system also provides real-time alerts to the user&rsquo;s cellphone in case of a security breach.</p>
<p>This solution enhances both the convenience and security of your vehicle, offering modern connectivity and control through BLE.</p>
<p><strong>[Video Tutorial Coming Soon]</strong></p>
<hr>
<h2 id="components-required">Components Required</h2>
<p>Here is a list of components needed to build the central locking and security system:</p>
<ul>
<li>ESP32 (Main controller for BLE and vehicle communication)</li>
<li>Xiao ESP32C3 (Transmitter for keyless entry)</li>
<li>Relays (for controlling door locks and indicators)</li>
<li>Immobilizer Circuit (connected to the car’s ECM)</li>
<li>Door and Bonnet Sensors (to detect door and bonnet status)</li>
<li>Alarm Module (for triggering alerts)</li>
<li>12V Power Supply (for powering the system)</li>
<li>LEDs (for status indication)</li>
<li>Jumper Wires</li>
<li>Connectors</li>
<li>PCB (for custom circuit design)</li>
<li>Breadboard (for testing)</li>
<li>Resistors, Diodes, Capacitors, etc.</li>
</ul>
<hr>
<h2 id="circuit-schematic-diagram">Circuit Schematic Diagram</h2>
<p>[]<br>
The diagram will show how the ESP32, sensors, immobilizer, Xiao ESP32C3 transmitter, and other components are connected.</p>
<hr>
<h2 id="pcb-design">PCB Design</h2>
<p>For the final product, you can design a custom PCB that integrates the ESP32 controller, relays, sensors, and communication circuits. This will make the setup more compact and reliable.</p>
<p>I have used EasyEDA software for PCB designing.</p>
<hr>
<h2 id="raw-media-files">Raw Media Files</h2>
<p>These are the raw unedited photos, videos, and prototype tests. Click Here:</p>
<p><a href="https://photos.app.goo.gl/32ChjenSaV4ZbyQp9"><img src="https://img.shields.io/badge/GooglePhotos-Album-blue?style=flat&amp;logo=Google%20Photos" alt="Static Badge"></a></p>
<hr>
<h2 id="how-it-works">How It Works</h2>
<ol>
<li>
<p><strong>Bluetooth Communication:</strong> The ESP32 serves as the main controller, using BLE to communicate with either the user&rsquo;s smartphone or the dedicated transmitter built with the Xiao ESP32C3. It manages lock/unlock signals, bonnet status, and alarm settings.</p>
</li>
<li>
<p><strong>Immobilizer Functionality:</strong> The system features an integrated immobilizer that communicates with the car’s ECM. In the event of a theft attempt, the immobilizer prevents the car from moving by cutting off ignition or other crucial systems.</p>
</li>
<li>
<p><strong>Real-time Alerts:</strong> In case of unauthorized access or forced entry, the system sends real-time notifications to the user’s cellphone via BLE. The user is alerted about the specific event, such as door status or bonnet being opened.</p>
</li>
<li>
<p><strong>Keyless Entry:</strong> The transmitter (Xiao ESP32C3) can be used as a physical keyless entry device, which allows the driver to unlock/lock the car without needing a physical key.</p>
</li>
<li>
<p><strong>Alarm System:</strong> When a security breach is detected, the alarm system is triggered, sounding an audible alert and notifying the user via phone.</p>
</li>
</ol>
<hr>
<h2 id="step-by-step-making-guide">Step-by-Step Making Guide</h2>
<h3 id="step-1-gather-components">Step 1: Gather Components</h3>
<p>Collect all the components listed above, ensuring you have the ESP32, Xiao ESP32C3, relays, and sensors.</p>
<h3 id="step-2-build-the-circuit-prototype">Step 2: Build the Circuit Prototype</h3>
<p>Start by connecting the ESP32 to the door sensors, relays, and the immobilizer circuit. Wire the transmitter using the Xiao ESP32C3. Test each connection using a breadboard.</p>
<h3 id="step-3-program-the-esp32-and-transmitter">Step 3: Program the ESP32 and Transmitter</h3>
<p>Using the Arduino IDE, program the ESP32 to manage door locking, bonnet status, BLE communication, and immobilizer functionality. Program the Xiao ESP32C3 transmitter to send lock/unlock signals to the ESP32.<br>
[Insert code or link to code here]</p>
<h3 id="step-4-install-in-the-car">Step 4: Install in the Car</h3>
<p>Once the prototype is tested and functional, install the system in your car. Mount the ESP32 and relays securely, and wire them to the car’s door lock actuators, bonnet sensors, and the ECM for immobilizer communication.</p>
<h3 id="step-5-test-the-system">Step 5: Test the System</h3>
<p>Test all functions: lock/unlock via smartphone and transmitter, immobilizer activation, alarm triggering, and real-time alerts. Ensure the system responds quickly to BLE commands and correctly handles door and bonnet status.</p>
<h3 id="step-6-design-and-assemble-the-pcb">Step 6: Design and Assemble the PCB</h3>
<p>For a cleaner installation, design a custom PCB to house the ESP32, relays, and related circuitry. Assemble and solder all components onto the PCB and reinstall it in the vehicle.</p>
<hr>
<h2 id="conclusion">Conclusion</h2>
<p>This central locking and security controller project adds an advanced layer of security to the Wagon R using BLE technology. The system allows for seamless keyless entry, enhanced vehicle immobilization during theft attempts, and real-time notifications to the user&rsquo;s cellphone. By using an ESP32 and Xiao ESP32C3, the system provides modern wireless control while ensuring reliability and security.</p>
<hr>
<h2 id="advantages">Advantages</h2>
<ul>
<li>Keyless entry via Bluetooth (phone or transmitter).</li>
<li>Integrated immobilizer that prevents vehicle movement in theft situations.</li>
<li>Real-time alerts to the user’s phone.</li>
<li>Works seamlessly with the vehicle&rsquo;s existing locking and alarm systems.</li>
<li>User-friendly design with a dedicated phone app for control.</li>
</ul>
<hr>
<h2 id="disadvantages">Disadvantages</h2>
<ul>
<li>Requires BLE-compatible phone for smartphone control.</li>
<li>Installation involves modifying the car&rsquo;s wiring, which may require automotive knowledge.</li>
<li>Dependent on Bluetooth range for functionality, which may limit control to nearby areas.</li>
</ul>
<hr>
<h2 id="future-scope-for-improvement">Future Scope for Improvement</h2>
<ul>
<li>Extend Bluetooth range with BLE mesh or add Wi-Fi connectivity for remote access.</li>
<li>Add GPS tracking to enhance vehicle recovery in case of theft.</li>
<li>Implement voice control via Google Assistant or Alexa.</li>
<li>Incorporate fingerprint or face recognition for enhanced security.</li>
<li>Add a battery backup to keep the system running even when the car&rsquo;s battery is disconnected.</li>
</ul>
<hr>
]]></content></item><item><title>Iot Gas Safety System</title><link>https://atharvap8.github.io/posts/2024/10/iot-gas-safety-system/</link><pubDate>Wed, 23 Oct 2024 17:27:02 +0530</pubDate><guid>https://atharvap8.github.io/posts/2024/10/iot-gas-safety-system/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>In this project, we will build a comprehensive gas safety system designed to enhance household safety by monitoring gas leaks and taking automatic corrective actions. The system controls an exhaust fan, operates a servo motor to turn off the gas regulator, and sends notifications via email and popup alerts. Designed with robustness, fireproofing, data retention, and false alarm prevention in mind, this device provides reliable and continuous gas monitoring. Perfect for safety-conscious homeowners or DIY enthusiasts, this project helps to prevent potential hazards.&lt;/p></description><content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>In this project, we will build a comprehensive gas safety system designed to enhance household safety by monitoring gas leaks and taking automatic corrective actions. The system controls an exhaust fan, operates a servo motor to turn off the gas regulator, and sends notifications via email and popup alerts. Designed with robustness, fireproofing, data retention, and false alarm prevention in mind, this device provides reliable and continuous gas monitoring. Perfect for safety-conscious homeowners or DIY enthusiasts, this project helps to prevent potential hazards.</p>
<hr>
<h2 id="youtube-video-link">Youtube Video Link</h2>
<h2 id="components-required">Components Required</h2>
<p>Here are the components you’ll need to build the gas safety system:</p>
<ul>
<li>ESP32 (for Wi-Fi connectivity and control)</li>
<li>MQ-2 Gas Sensor (for gas leak detection)</li>
<li>Servo Motor (for controlling the gas regulator)</li>
<li>Exhaust Fan (to ventilate the gas leak)</li>
<li>Relay Module (to control the exhaust fan)</li>
<li>Buzzer (for audible alerts)</li>
<li>Fireproof Casing (for added safety)</li>
<li>5V Power Supply</li>
<li>Jumper Wires</li>
<li>PCB (for the final circuit design)</li>
<li>Additional components: Resistors, Diodes, Capacitors, Transistors</li>
<li>Breadboard (for prototyping)</li>
</ul>
<hr>
<h2 id="circuit-schematic-diagram">Circuit Schematic Diagram</h2>
<p>[Insert your detailed circuit schematic diagram here]<br>
This schematic shows how the ESP32, gas sensor, servo motor, exhaust fan, and other components are connected.</p>
<hr>
<h2 id="pcb-design">PCB Design</h2>
<p>Once your prototype is working well, you can create a more permanent solution by designing a custom PCB. Here&rsquo;s the design I used:</p>
<p>[Insert PCB design here]<br>
You can use software like KiCad or Eagle to design your own.</p>
<hr>
<h2 id="project-media-folder">Project Media Folder</h2>
<p>[Insert link to downloadable project files including circuit diagrams, code, PCB files, and documentation.]</p>
<hr>
<h2 id="how-it-works">How It Works</h2>
<p>The gas safety system continuously monitors gas levels using the MQ-2 gas sensor. If a gas leak is detected, the system immediately performs the following actions:</p>
<ol>
<li>The exhaust fan is triggered to remove gas from the environment.</li>
<li>The servo motor rotates to turn off the regulator on the gas cylinder.</li>
<li>Simultaneously, the ESP32 sends an email alert and a popup notification to the user’s mobile device via Wi-Fi.</li>
<li>A buzzer will sound to alert individuals in proximity.</li>
<li>Data retention and anti-false alarm measures ensure reliable operation. In case of sensor noise or minor fluctuations, the system intelligently filters out false triggers.</li>
</ol>
<hr>
<h2 id="step-by-step-making-guide">Step-by-Step Making Guide</h2>
<p><strong>Step 1: Gather All Components</strong><br>
Ensure you have all the components listed above, and prepare your workspace.</p>
<p><strong>Step 2: Build the Prototype Circuit</strong><br>
Start by connecting the MQ-2 gas sensor to the ESP32. Wire the servo motor, relay module, and buzzer to the appropriate pins on the ESP32. Use a breadboard for prototyping.</p>
<p><strong>Step 3: Program the ESP32</strong><br>
Using Arduino IDE, upload the code to the ESP32. The code includes functionality for controlling the servo motor, triggering the exhaust fan, and sending notifications.<br>
[Insert sample code or link to code here]</p>
<p><strong>Step 4: Test the System</strong><br>
Simulate a gas leak by introducing a small amount of gas near the MQ-2 sensor. The exhaust fan should turn on, and the servo motor should rotate to turn off the gas regulator. Ensure notifications are received via email and popup.</p>
<p><strong>Step 5: Design and Assemble the PCB</strong><br>
Once the prototype works correctly, design the PCB. After soldering the components onto the PCB, test the final circuit to ensure everything functions as expected.</p>
<p><strong>Step 6: Enclose in a Fireproof Casing</strong><br>
Install the system in a robust, fireproof casing for added protection. Ensure that the gas sensor is exposed to the environment while keeping other components shielded.</p>
<hr>
<h2 id="conclusion">Conclusion</h2>
<p>This gas safety system offers a robust, automated solution for gas leak detection and prevention. By using easily accessible components, this project provides peace of mind with its reliable, responsive actions in hazardous conditions. With Wi-Fi connectivity, real-time notifications, and a fireproof design, it’s a perfect DIY solution for enhancing home safety.</p>
<hr>
<h2 id="advantages">Advantages</h2>
<ul>
<li>Automated response to gas leaks (exhaust fan and gas regulator control).</li>
<li>Real-time email and popup notifications.</li>
<li>Fireproof and robust design for safe use.</li>
<li>False alarm prevention with data retention features.</li>
<li>Can be monitored remotely through Wi-Fi.</li>
</ul>
<hr>
<h2 id="disadvantages">Disadvantages</h2>
<ul>
<li>Requires stable Wi-Fi connectivity for notifications.</li>
<li>The servo motor may require occasional maintenance to ensure smooth operation.</li>
<li>Initial setup may be complex for beginners.</li>
</ul>
<hr>
<h2 id="future-scope-for-improvement">Future Scope for Improvement</h2>
<ul>
<li>Integration with smart home systems such as Google Home or Alexa.</li>
<li>Battery backup to keep the system running during power outages.</li>
<li>Addition of an LCD screen to display gas levels and system status.</li>
<li>Further optimization of false alarm filtering algorithms.</li>
</ul>
<hr>
]]></content></item><item><title>Esp32 Washing Machine</title><link>https://atharvap8.github.io/posts/2024/07/esp32-washing-machine/</link><pubDate>Mon, 29 Jul 2024 18:00:32 +0530</pubDate><guid>https://atharvap8.github.io/posts/2024/07/esp32-washing-machine/</guid><description>&lt;h1 id="coming-soon">&lt;strong>Coming SOON!&lt;/strong>&lt;/h1></description><content type="html">&lt;h1 id="coming-soon">&lt;strong>Coming SOON!&lt;/strong>&lt;/h1>
</content></item><item><title>Automatic Water Tap V2</title><link>https://atharvap8.github.io/posts/2024/06/automatic-water-tap-v2/</link><pubDate>Sun, 23 Jun 2024 12:57:02 +0530</pubDate><guid>https://atharvap8.github.io/posts/2024/06/automatic-water-tap-v2/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>In this project, I have built an IR Sensor-based automatic water tap. This system allows water to flow when it detects an object in front of the sensor, making it a convenient and hygienic solution for home or public restrooms. The IR sensor is mounted on the tap head to detect any objects near the water tap.&lt;/p>
&lt;h2 id="youtube-video">YouTube Video&lt;/h2>
&lt;p>Here&amp;rsquo;s the project&amp;rsquo;s youtube video link:
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/RHL07T6kZwI?autoplay=0&amp;amp;controls=1&amp;amp;end=0&amp;amp;loop=0&amp;amp;mute=0&amp;amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video">&lt;/iframe>
&lt;/div>
&lt;/p></description><content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>In this project, I have built an IR Sensor-based automatic water tap. This system allows water to flow when it detects an object in front of the sensor, making it a convenient and hygienic solution for home or public restrooms. The IR sensor is mounted on the tap head to detect any objects near the water tap.</p>
<h2 id="youtube-video">YouTube Video</h2>
<p>Here&rsquo;s the project&rsquo;s youtube video link:

    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/RHL07T6kZwI?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"></iframe>
    </div>
</p>
<h2 id="components-required">Components Required</h2>
<ul>
<li>IR Sensor Module</li>
<li>12V Solenoid Valve</li>
<li>PNP Transistor: BD140</li>
<li>Resistor: 10kΩ, 1/4Watt, ±5%</li>
<li>Diode: 1N4007 General Purpose Diode</li>
<li>Power Supply (230V AC to 12V DC)</li>
<li>Mini 360 Buck Converter</li>
<li>D4184 Mosfet Control Module</li>
<li>Connecting Wires</li>
<li>Enclosure</li>
<li>Screws, Zip Ties, Piping, etc.</li>
<li>Water Tap</li>
</ul>
<h2 id="circuit-diagram">Circuit Diagram</h2>
<figure><img src="/img/automatic_water_tap.jpg">
</figure>

<h2 id="project-media">Project Media</h2>
<p>Click Here:</p>
<p><a href="https://photos.app.goo.gl/nLhd8z81mfEargJE8"><img src="https://img.shields.io/badge/GooglePhotos-Album-greenCl" alt="Static Badge"></a></p>
<h2 id="how-it-works">How It Works</h2>
<p>The automatic water tap works based on the principle of Infrared (IR) detection. Here&rsquo;s a concise theory of its operation:</p>
<ol>
<li><strong>IR Sensor Module</strong>: The IR sensor emits infrared light. When an object comes within the sensor&rsquo;s range, the emitted light reflects back to the sensor.</li>
<li><strong>Signal Processing</strong>: The sensor detects the reflected IR light and sends a signal to the connected circuit.</li>
<li><strong>MOSFET Control</strong>: The received signal is used to activate a MOSFET. It acts as a switch to control the solenoid valve.</li>
<li><strong>Solenoid Valve Operation</strong>: When the MOSFET is activated, it allows current to flow through the solenoid valve, opening it and letting water flow.</li>
<li><strong>Water Flow</strong>: The water flows as long as the object is detected by the IR sensor. Once the object is removed, the sensor stops detecting the reflection, and the solenoid valve closes, stopping the water flow.</li>
</ol>
<h2 id="step-by-step-guide">Step-by-Step Guide</h2>
<ol>
<li>
<p><strong>Prepare the enclosure:</strong></p>
<ul>
<li>Drill 2 holes into the plastic enclosure, to be able to mount it to a wall.</li>
<li>Drill additional holes to mount the components, you can use zip ties, or screw + clamps.</li>
<li>Drill required holes to pass the incoming and outgoing wires.</li>
</ul>
</li>
<li>
<p><strong>Circuit Connections:</strong></p>
<ul>
<li>Connect the components, according to the wiring diagram shown above.</li>
<li>Do make sure to use heat shrink tubing, to avoid short circuit.</li>
</ul>
</li>
<li>
<p><strong>Connect the Solenoid Valve:</strong></p>
<ul>
<li>Connect the solenoid valve wires, to its terminals.</li>
<li>Connect the solenoid valve, with one end to the water tap inlet, and other end to the source.</li>
<li>Keep in mind, the solenoid valve direction.</li>
<li>If connected in reverse, the solenoid valve will either flow continuously, or won&rsquo;t work at all.</li>
</ul>
</li>
<li>
<p><strong>Tap Connections:</strong></p>
<ul>
<li>Attach a layer strip of insulation tape to the back of the sensor module PCB.</li>
<li>Attach a double sided tape on top of the insulation tape, and press it firmly.</li>
<li>Position the sensor, and stick it underside of the tap.</li>
<li>Align the transmitter and receiver LEDs, so as to properly set the control area.</li>
<li>attach a layer of insulation tape around the sensor pcb and tap. As shown in the video.</li>
</ul>
</li>
<li>
<p><strong>First Time Power-Up:</strong></p>
<ul>
<li>After properly checking the connections, turn on the power to the circuit.</li>
</ul>
</li>
<li>
<p><strong>Calibrate the Sensor:</strong></p>
<ul>
<li>Adjust the sensor position, angle, to have the desired control position.</li>
</ul>
</li>
<li>
<p><strong>Test the Operation:</strong></p>
<ul>
<li>Place your hand in front of the tap. The sensor should detect your hand and open the solenoid valve, allowing water to flow.</li>
<li>Remove your hand to stop the water flow.</li>
</ul>
</li>
</ol>
<h2 id="conclusion">Conclusion</h2>
<p>This IR sensor-based automatic water tap project is an excellent way to enhance hygiene and convenience in both home and public restrooms. By automating the water flow, you can minimize water wastage and prevent the spread of germs through touch. Being cost effective, and easy to build, anyone interested, can make it.</p>
]]></content></item><item><title>Alexa Washing Machine</title><link>https://atharvap8.github.io/posts/2024/06/alexa-washing-machine/</link><pubDate>Fri, 07 Jun 2024 17:57:12 +0530</pubDate><guid>https://atharvap8.github.io/posts/2024/06/alexa-washing-machine/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this project, we will build a smart controller for a washing machine. The controller is based on the ESP32 module, which works as the central brain. It manages all the data processing, communication &amp;amp; feedback, and manages I/O in the system. The system includes buck converters, power supply, and relays for actuator control. It utilizes an inverter drive to control the motor speed and direction, with a changeover relay configuration to manage the motor’s rotational direction. Also it includes a 16x2 display, and pushbuttons, for program control, and LEDs for status indication. All wash programs are embedded within the microcontroller, and the system is designed for easy further development, allowing changes to be made according to user requirements.
This project brings IoT functionality to washing machines, offering voice control, remote monitoring &amp;amp; feedback for convenience and efficiency.&lt;/p></description><content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>In this project, we will build a smart controller for a washing machine. The controller is based on the ESP32 module, which works as the central brain. It manages all the data processing, communication &amp; feedback, and manages I/O in the system. The system includes buck converters, power supply, and relays for actuator control. It utilizes an inverter drive to control the motor speed and direction, with a changeover relay configuration to manage the motor’s rotational direction. Also it includes a 16x2 display, and pushbuttons, for program control, and LEDs for status indication. All wash programs are embedded within the microcontroller, and the system is designed for easy further development, allowing changes to be made according to user requirements.
This project brings IoT functionality to washing machines, offering voice control, remote monitoring &amp; feedback for convenience and efficiency.</p>
<hr>
<h2 id="components-required">Components Required</h2>
<p>To build this, the following components are required:</p>
<ul>
<li>ESP32 module</li>
<li>Buck Converters</li>
<li>Relay module</li>
<li>Power Supply Unit</li>
<li>Inverter Drive</li>
<li>Push Buttons and Switches</li>
<li>LEDs</li>
<li>Connectors and Wires</li>
<li>PCB</li>
<li>Misc. (screws, tools, equipments, electrical box, etc.)</li>
</ul>
<hr>
<h2 id="project-files">Project Files</h2>
<p>This is where you can find the Code, Schematics, PCB Layout, and all docs related to this project. Click Here:</p>
<hr>
<h2 id="raw-media-files">Raw Media Files</h2>
<p>These are the raw unedited photos, videos, and prototype tests. Click Here:</p>
<p><a href="https://photos.app.goo.gl/JXmmXoFTdbAtJn859"><img src="https://img.shields.io/badge/GooglePhotos-Album-blue?style=flat&amp;logo=Google%20Photos" alt="Static Badge"></a></p>
<hr>
<h2 id="how-it-works">How It Works</h2>
<p>The smart washing machine controller has a ESP32 module, at its core, which manages all the functionality. It receives all inputs, manages outputs, manages timing, and signal control, output control, and Serial Communication. The main PCB houses the ESP32, some voltage converters, power supply, and connectors for each discrete sensor / device.
There is also a secondary PCB, which is called Inverter Drive Board. As the name suggests, its a inverter drive used to control the motor, and manage its parameters. The ESP32 provides speed &amp; direction signals to the board. For changover action, and to control some actuators, relays are present, which are direct driven by ESP32. I have used
all these components in their modular form, and have used Berg Connectors for easy part replacement and repair.</p>
<hr>
<h2 id="step-by-step-making-guide">Step-by-Step Making Guide</h2>
<h3 id="step-1-documentation-and-design">Step 1: Documentation, and design</h3>
<p>Starting with schematic diagram, and component selection, we move forward to making the design, of the whole assembly.</p>
<h3 id="step-2-assembly">Step 2: Assembly</h3>
<p>Start by connecting every part on the PCB / perfboard, then connect the pin headers for the specific sensors / devices, actuators, power supply, etc.</p>
<h3 id="step-3-program-the-esp32">Step 3: Program the ESP32</h3>
<p>Edit the credentials in the given code, and then upload it to ESP32, and verify every connection atleast 2 times before first powerup.</p>
<h3 id="step-4-calibration--adjustments">Step 4: Calibration &amp; Adjustments</h3>
<p>After initial powerup, manual calibration needs to be done, for the water level sensor to work properly. adjusting the float parameter of water sensor with the actual 0 reference, confirms that it is calibrated successfully.</p>
<h3 id="step-5-final-installation-and-testing">Step 5: Final Installation and Testing</h3>
<p>After assembling the PCB and programming the ESP32, install the controller in the washing machine. Connect the motor, sensors, and other peripherals to the system and run tests to ensure the washing programs work correctly, including voice commands and Telegram updates. It is beneficial to use modular connectors (but with proper connection strength) to ensure no loose connects, and a hassle free replacement process.</p>
<hr>
<h2 id="conclusion">Conclusion</h2>
<p>The smart washing machine controller brings modern technology into home appliances by integrating voice control and remote monitoring. With the ESP32 at the core, the system can control the motor, manage wash programs, and provide real-time feedback via Telegram. The solution is easily customizable for different washing machine models, making it a versatile IoT upgrade for home appliances.</p>
<hr>
<h2 id="advantages">Advantages</h2>
<ul>
<li>Alexa voice control for convenient operation.</li>
<li>Real-time updates via Telegram for remote monitoring.</li>
<li>Inverter drive control for precise washing &amp; enhanced efficiency.</li>
<li>Changeover relays to control motor direction.</li>
<li>Customizable wash programs.</li>
<li>Modular PCB design for easy assembly and repair.</li>
</ul>
<hr>
<h2 id="disadvantages">Disadvantages</h2>
<ul>
<li>Requires Wi-Fi connection for full functionality (Alexa and Telegram).</li>
<li>Complex assembly procedure.</li>
<li>Programming knowledge is required for making custom changes.</li>
<li>May need advanced electrical skills for installation and modification.</li>
</ul>
<hr>
<h2 id="future-scope-for-improvement">Future Scope for Improvement</h2>
<ul>
<li>Add support for Google Assistant or other voice assistants.</li>
<li>Implement a mobile app for more detailed remote control and feedback.</li>
<li>Integrate additional sensors for more advanced monitoring (e.g., clothes weight, soil level, temperature, etc.).</li>
<li>Enhance energy efficiency with optimized motor control algorithms.</li>
<li>Changeover mechanical relays can be replaced by Solid State relays.</li>
</ul>
<hr>
]]></content></item><item><title>Alexa Smart Home</title><link>https://atharvap8.github.io/posts/2024/06/alexa-smart-home/</link><pubDate>Sun, 02 Jun 2024 17:57:12 +0530</pubDate><guid>https://atharvap8.github.io/posts/2024/06/alexa-smart-home/</guid><description>&lt;h1 id="smart-home-system-with-esp32-alexa-control-and-eeprom-state-retention">Smart Home System with ESP32, Alexa Control, and EEPROM State Retention&lt;/h1>
&lt;hr>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this project, we will create a smart home system that allows control over 14 devices and 1 air conditioner (AC) using an ESP32 microcontroller. The system includes EEPROM functionality, which retains the state of all devices even after a sudden power loss. With Alexa integration, users can control lights, fans, tube lights, AC, and more using voice commands and monitor the real-time status through the Alexa app. Each room is equipped with a 4-channel relay module, connected to a central controller that manages all relays.&lt;/p></description><content type="html"><![CDATA[<h1 id="smart-home-system-with-esp32-alexa-control-and-eeprom-state-retention">Smart Home System with ESP32, Alexa Control, and EEPROM State Retention</h1>
<hr>
<h2 id="introduction">Introduction</h2>
<p>In this project, we will create a smart home system that allows control over 14 devices and 1 air conditioner (AC) using an ESP32 microcontroller. The system includes EEPROM functionality, which retains the state of all devices even after a sudden power loss. With Alexa integration, users can control lights, fans, tube lights, AC, and more using voice commands and monitor the real-time status through the Alexa app. Each room is equipped with a 4-channel relay module, connected to a central controller that manages all relays.</p>
<p>This project is ideal for automating homes and integrating voice-controlled systems, making life easier and more efficient.</p>
<hr>
<h2 id="components-required">Components Required</h2>
<p>To build this smart home system, you’ll need the following components:</p>
<ul>
<li>ESP32 (central controller with Wi-Fi functionality)</li>
<li>4-Channel Relay Modules (one per room)</li>
<li>EEPROM (to store device states)</li>
<li>Alexa-compatible devices (for voice control)</li>
<li>AC Module (for controlling air conditioner)</li>
<li>Power Supply (5V and 12V as required)</li>
<li>Jumper Wires</li>
<li>Connectors</li>
<li>PCB for custom circuit design (optional)</li>
<li>Resistors, Capacitors, Diodes, etc.</li>
<li>Breadboard for testing</li>
</ul>
<hr>
<h2 id="raw-media-files">Raw Media Files</h2>
<p>These are the raw unedited photos, videos, and prototype tests. Click Here:</p>
<h2 id="httpsphotosappgooglmdpgtyuhdimzcurm7"><a href="https://photos.app.goo.gl/MDPgTyUHdiMzcUrm7"><img src="https://img.shields.io/badge/GooglePhotos-Album-blue?style=flat&amp;logo=Google%20Photos" alt="Static Badge"></a></h2>
<h2 id="how-it-works">How It Works</h2>
<p>The ESP32 serves as the main controller for the entire smart home system. Each room has a 4-channel relay module, which controls the devices (e.g., lights, fans, etc.). The ESP32 sends signals to the relay modules based on user commands.</p>
<p>Key features include:</p>
<ol>
<li><strong>Voice Control:</strong> Integrated with Alexa, users can control devices using voice commands.</li>
<li><strong>Real-time Monitoring:</strong> The status of each device is displayed and controlled through the Alexa app.</li>
<li><strong>EEPROM Functionality:</strong> In case of a power failure, the system retains the state of each device, ensuring continuity once power is restored.</li>
<li><strong>Centralized Control:</strong> A central controller manages all room relays, reducing wiring complexity and enabling seamless communication between rooms.</li>
</ol>
<hr>
<h2 id="step-by-step-making-guide">Step-by-Step Making Guide</h2>
<h3 id="step-1-gather-components">Step 1: Gather Components</h3>
<p>Collect all the components listed above, ensuring you have an ESP32, relay modules, EEPROM, and Alexa-compatible devices.</p>
<h3 id="step-2-build-the-circuit-prototype">Step 2: Build the Circuit Prototype</h3>
<p>Start by connecting the ESP32 to the 4-channel relay modules. Wire each room’s module to the central ESP32 controller. Ensure proper connections for the EEPROM and power supply.</p>
<h3 id="step-3-program-the-esp32">Step 3: Program the ESP32</h3>
<p>Using Arduino IDE or any other compatible platform, upload the code to the ESP32. The code should include the logic for relay control, Alexa voice integration, and EEPROM state retention.
[Insert code or link to code here]</p>
<h3 id="step-4-connect-to-alexa">Step 4: Connect to Alexa</h3>
<p>Set up the ESP32 to communicate with Alexa. You can use platforms like AWS IoT or ESP Alexa libraries. Ensure that each device (fan, light, etc.) is properly recognized in the Alexa app for voice and app control.</p>
<h3 id="step-5-test-the-system">Step 5: Test the System</h3>
<p>Once everything is connected, test each room by controlling devices with voice commands and the Alexa app. Ensure that the EEPROM correctly restores the device states after a power cut.</p>
<h3 id="step-6-design-and-assemble-the-pcb">Step 6: Design and Assemble the PCB</h3>
<p>After testing the prototype, move to PCB design for a more permanent solution. Assemble the components onto the PCB and test the system again.</p>
<hr>
<h2 id="conclusion">Conclusion</h2>
<p>This smart home system provides efficient, centralized control over various home appliances and devices. With features like Alexa voice control and real-time monitoring, the system offers a modern and convenient solution for home automation. The EEPROM functionality ensures device state retention, making the system reliable even in power outages.</p>
<hr>
<h2 id="advantages">Advantages</h2>
<ul>
<li>Centralized control over 14 devices and 1 AC unit.</li>
<li>Alexa voice control and real-time status monitoring via the Alexa app.</li>
<li>EEPROM functionality retains device states after power loss.</li>
<li>Modular relay system for easy expansion and customization.</li>
<li>Simple, user-friendly control interface through voice commands.</li>
</ul>
<hr>
<h2 id="disadvantages">Disadvantages</h2>
<ul>
<li>Complex initial setup due to wiring and Alexa integration.</li>
<li>Requires reliable Wi-Fi for Alexa and real-time monitoring.</li>
<li>Limited to 14 devices unless more relays are added.</li>
</ul>
<hr>
<h2 id="future-scope-for-improvement">Future Scope for Improvement</h2>
<ul>
<li>Expand the number of devices controlled by adding more relay modules.</li>
<li>Integrate with other smart home platforms like Google Home or HomeKit.</li>
<li>Add support for remote control via mobile apps outside the Alexa ecosystem.</li>
<li>Improve power efficiency and incorporate energy-saving mechanisms for smart devices.</li>
<li>Battery backup to maintain system operation during power outages.</li>
</ul>
<hr>
]]></content></item></channel></rss>